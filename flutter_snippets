
=================================================================================================
  Install flutter
=================================================================================================
  1. Follow step 1 to 3 from below link
    https://flutter.dev/docs/get-started/install/macos
    
  2. Run command flutter in terminal it will download dart sdk
  
  3. Update the environment path.

    Open terminal.

    vim $HOME/.zshrc

    Press "I" key for going to insert mode.

    add the following line in the opened file:

    export PATH="$PATH:/YOUR_FLUTTER_DIR/flutter/bin"

    Press "Esc" then write :wq! in terminal and press enter to exit vim.

    Reopen the terminal and check "flutter doctor"
    
    if flutter doctor is showing any then its also shows command to solve that issue
    
    
=================================================================================================
  Set alignment of Widgets
=================================================================================================

Center vertically
Column(
  mainAxisAlignment: MainAxisAlignment.center,
  children: <Widget>[ ... ],
)
Center horizontally
Column(
  crossAxisAlignment: CrossAxisAlignment.center,
  children: <Widget>[ ... ],
)
But if the column is hugging its content then just wrap it in a Center widget

Center(
  child: Column(
    children: <Widget>[ ... ],
  ),
)

=================================================================================================
  Change Flutter App Name
=================================================================================================

Android
Open AndroidManifest.xml (located at android/app/src/main)

<application
    android:label="App Name" ...> // Your app name here
iOS
Open info.plist (located at ios/Runner)

<key>CFBundleName</key>
<string>App Name</string> // Your app name here

Don't forget to run
flutter clean


=================================================================================================
  Add delay
=================================================================================================

new Future.delayed(const Duration(seconds: 1)); //recommend

new Timer(const Duration(seconds: 1), ()=>print("1 second later."));

sleep(const Duration(seconds: 1)); //import 'dart:io';

new Stream.periodic(const Duration(seconds: 1), (_) => print("1 second later.")).first.then((_)=>print("Also 1 second later."));

=================================================================================================
  Show AlertDialog
=================================================================================================
  
    void _showSignoutDialog(BuildContext context, GlobalKey<ScaffoldState> formKey, SharedPreferences sharedPreferences){
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: new Text(TextFile.SIGNOUT_TITLE, style: TextStyle(color: Colors.black.withOpacity(0.8))),
          content: new Text(TextFile.SIGNOUT_DESCRIPTION),
          actions: <Widget>[
            new FlatButton(
              child: new Text(TextFile.BUTTON_CANCEL),
              onPressed: () async {
                    Navigator.of(context).pop();
              },
            ),
            new FlatButton(
              child: new Text(TextFile.BUTTON_SIGNOUT),
              onPressed: () {
                    Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }


=================================================================================================
  Change button color if text entered in textfield is valid
=================================================================================================
  
  https://stackoverflow.com/a/58691020
  
  
 show hide widget on UI using Bloc
 https://stackoverflow.com/a/55594815


=================================================================================================
  Change button color if text entered in textfield is valid
=================================================================================================

1. In your pubspec.yaml file add this:

dependencies:
  device_info: ^0.4.0+4

2. Create a method:

Future<String> _getId() async {
  DeviceInfoPlugin deviceInfo = DeviceInfoPlugin();
  if (Theme.of(context).platform == TargetPlatform.iOS) {
    IosDeviceInfo iosDeviceInfo = await deviceInfo.iosInfo;
    return iosDeviceInfo.identifierForVendor; // unique ID on iOS
  } else {
    AndroidDeviceInfo androidDeviceInfo = await deviceInfo.androidInfo;
    return androidDeviceInfo.androidId; // unique ID on Android
  }
}

3. Use it like:

String deviceId = await _getId();

//or u can call below function to get more device info

static Future<List<String>> getDeviceDetails() async {
    String deviceName;
    String deviceVersion;
    String identifier;
    final DeviceInfoPlugin deviceInfoPlugin = new DeviceInfoPlugin();
    try {
      if (Platform.isAndroid) {
        var build = await deviceInfoPlugin.androidInfo;
        deviceName = build.model;
        deviceVersion = build.version.toString();
        identifier = build.androidId;  //UUID for Android
      } else if (Platform.isIOS) {
        var data = await deviceInfoPlugin.iosInfo;
        deviceName = data.name;
        deviceVersion = data.systemVersion;
        identifier = data.identifierForVendor;  //UUID for iOS
      }
    } on PlatformException {
      print('Failed to get platform version');
    }

//if (!mounted) return;
return [deviceName, deviceVersion, identifier];
}

=================================================================================================
  Make specific parts of a text clickable (spannable/ rich text)
=================================================================================================

Widget build(BuildContext context) {
    TextStyle defaultStyle = TextStyle(color: Colors.grey, fontSize: 20.0);
    TextStyle linkStyle = TextStyle(color: Colors.blue);
    return RichText(
      text: TextSpan(
        style: defaultStyle,
        children: <TextSpan>[
          TextSpan(text: 'By clicking Sign Up, you agree to our '),
          TextSpan(
              text: 'Terms of Service',
              style: linkStyle,
              recognizer: TapGestureRecognizer()
                ..onTap = () {
                  print('Terms of Service"');
                }),
          TextSpan(text: ' and that you have read our '),
          TextSpan(
              text: 'Privacy Policy',
              style: linkStyle,
              recognizer: TapGestureRecognizer()
                ..onTap = () {
                  print('Privacy Policy"');
                }),
        ],
      ),
    );
  }
  
=================================================================================================
  Password TextField toggle
=================================================================================================
  1. Declase boolean variable to keep track of visibility
  bool _obscurePassword = true;
  
  2. Write function to toggle boolean variable
  void _togglePasswordVisibility() {
    setState(() {
      _obscurePassword = !_obscurePassword;
    });
  }
  
  3. Configure TextFormField widget
  
  TextFormField(
      obscureText: _obscurePassword,
      decoration: InputDecoration(
        hintText: "Enter your password",
          suffixIcon: IconButton(
            onPressed: () => _togglePasswordVisibility(),
            icon: Icon(Icons.remove_red_eye,  color: this._obscurePassword ? Colors.blue : Colors.grey,),
          ),
      ),
    )
    
=================================================================================================
  build production/release apk for flutter project
=================================================================================================

  1. create key.properties file and modify build.gradle file according to below link
    https://flutter.dev/docs/deployment/android
  2. use below command to build release apk
    flutter build apk --release
    
=================================================================================================
  call post api as raw request body
=================================================================================================    
    
    
    Map data = {
      'mobile_no': mobile_no,
      'otp': enteredOTP,
    };

    //encode Map to JSON
    var requestBody = json.encode(data);

    debugPrint(requestBody);

 
      if(response.statusCode==200){
        // api success 
        Map<String , dynamic> jsonResopnse = json.decode(response.body);
        http.Response response = await http.post(ApiConstants.VERIFYOTP, body: requestBody);
       
      }else {
        // api error
      }
      
=================================================================================================
  Manage sqlite db version in flutter
=================================================================================================    
      
      Future<Database> initDb() async {

        final databasesPath = await getDatabasesPath();
        final path = join(databasesPath, "database.db");

        var db = await openDatabase(path);

        //if database does not exist yet it will return version 0
        if (await db.getVersion() < NEW_DB_VERSION) {

          db.close();

          //delete the old database so you can copy the new one
          await deleteDatabase(path);

          try {
            await Directory(dirname(path)).create(recursive: true);
          } catch (_) {}

          //copy db from assets to database folder
          ByteData data = await rootBundle.load("assets/databases/database.db");
          List<int> bytes = data.buffer.asUint8List(data.offsetInBytes, data.lengthInBytes);
          await File(path).writeAsBytes(bytes, flush: true);

          //open the newly created db 
          db = await openDatabase(path);

          //set the new version to the copied db so you do not need to do it manually on your bundled database.db
          db.setVersion(NEW_DB_VERSION);

        }

        return db;
      }
    }

=================================================================================================
  Get today's formated date
=================================================================================================    
  import 'package:intl/intl.dart';
  
  DateTime now = new DateTime.now();
    DateTime date = new DateTime(now.year, now.month, now.day);

    final customDateFormat = new DateFormat('yyyy-MM-dd');
    var mDate = customDateFormat.format(date);
   
   
   String getFormattedDate(String dateString){
    try{
      DateTime now = DateTime.parse(dateString);
      //String mDate = DateFormat().addPattern("yyyy-MM-dd HH:mm:ss").format(now);
      String mDate = DateFormat().addPattern("dd-MM-yyyy").format(now);
      //final customDateFormat = new DateFormat('dd-MM-yyyy');
      //var mDate = customDateFormat.format(now);
      return mDate.toString();
    }catch(_){
        return dateString;
    }
  }
   
=================================================================================================
  Parse JSON Object
=================================================================================================    
  
  List<dynamic> _declarationList = [];


  var userDetails = _declarationList[index]["user_details"];
  var user_name = userDetails["name"];
  
  var userDetails = json.decode(_declarationList[index]["user_details"]);
  var user_name = userDetails["name"];
  
  Map<String, dynamic> userDetails = json.decode(optionArray);
  var user_name = userDetails["name"];

=================================================================================================
  Add press back agait to exit app message
=================================================================================================  

  //add dependency to show toast message
  fluttertoast: 4.0.1

  DateTime currentBackPressTime;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      ...
      body: WillPopScope(child: getBody(), onWillPop: onWillPop),
    );
  }
  
  Future<bool> onWillPop() {
    DateTime now = DateTime.now();
    if (currentBackPressTime == null ||
        now.difference(currentBackPressTime) > Duration(seconds: 2)) {
      currentBackPressTime = now;
      Fluttertoast.showToast(msg: "Press BACK again to exit...");
      return Future.value(false);
    }
    return Future.value(true);
  }
  
  
=================================================================================================
  Show timer inside dialog (alert dialog)
================================================================================================= 

  1. Add code in intiState()
  @override
  void initState() {
    super.initState();
    super.init(context, _scaffoldState, state: this);
    _events = new StreamController<int>.broadcast();
    _events.add(5);// 5 second timer
  }
  
  2. create timer
  Timer _timer;
  StreamController<int> _events;//state level declaration
  
  void _startTimer() {
    _counter = 5;
    if (_timer != null) {
      _timer.cancel();
    }
    _timer = Timer.periodic(Duration(seconds: 1), (timer) {
      //setState(() {
      (_counter > 0) ? _counter-- : _timer.cancel();
      //});
      print(_counter);
      _events.add(_counter);
    });
  }

  
  3. declare function to show AlertDialog
  
  void showAlertDialog(BuildContext ctx) {
    var alert = AlertDialog(
      // title: Center(child:Text('Enter Code')),
        shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.all(Radius.circular(20.0))),
        backgroundColor: Colors.grey[100],
        elevation: 0.0,
        content: StreamBuilder<int>(
            stream: _events.stream,
            builder: (BuildContext context, AsyncSnapshot<int> snapshot) {
              bool isVisible = false;
              if(snapshot.data!=null && snapshot.data.toString()=="0"){
                isVisible = true;
              }
              print(snapshot.data.toString());
               return Container(
                height: 215,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: <Widget>[
                    Padding(
                        padding: const EdgeInsets.only(
                            top: 10, left: 10, right: 10, bottom: 15),
                        child: Text(
                          'Enter Code',
                          style: TextStyle(
                              color: Colors.green[800],
                              fontWeight: FontWeight.bold,
                              fontSize: 16),
                        )),
                    Container(
                      height: 70,
                      width: 180,
                      child: TextFormField(
                        style: TextStyle(
                            fontSize: 20, fontWeight: FontWeight.bold),
                        textAlign: TextAlign.center,
                        decoration: InputDecoration(
                          enabledBorder: OutlineInputBorder(
                              borderSide:
                              BorderSide(color: Colors.green, width: 0.0)),
                        ),
                        keyboardType: TextInputType.number,
                        maxLength: 10,
                      ),
                    ),
                    SizedBox(
                      height: 1,
                    ),
                    Text(snapshot.hasData?'00:${snapshot.data.toString()}':'00:00'),
                    SizedBox(
                      height: 15,
                    ),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: <Widget>[
                        ClipRRect(
                          borderRadius: BorderRadius.circular(25),
                          child: Material(
                            child: InkWell(
                              onTap: () {
                                //Navigator.of(ctx).pushNamed(SignUpScreenSecond.routeName);
                              },
                              child: Container(
                                width: 100,
                                height: 50,
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(25),
                                  gradient: LinearGradient(
                                      colors: [
                                        Colors.green,
                                        Colors.grey,
                                      ],
                                      begin: Alignment.topLeft,
                                      end: Alignment.bottomRight),
                                ),
                                child: Center(
                                    child: Text(
                                      'Validate',
                                      style: TextStyle(
                                          color: Colors.white,
                                          fontSize: 16,
                                          fontWeight: FontWeight.bold),
                                    )),
                              ),
                            ),
                          ),
                        ),
                        Visibility(
                          visible: isVisible,
                          child: ClipRRect(
                            borderRadius: BorderRadius.circular(25),
                            child: Material(
                              child: InkWell(
                                onTap: () {},
                                child: Container(
                                  width: 100,
                                  height: 50,
                                  decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(25),
                                    gradient: LinearGradient(
                                        colors: [
                                          Colors.grey,
                                          Colors.green,
                                        ],
                                        begin: Alignment.topLeft,
                                        end: Alignment.bottomRight),
                                  ),
                                  child: Center(
                                      child: Text(
                                        'Resend',
                                        style: TextStyle(
                                            color: Colors.white,
                                            fontSize: 16,
                                            fontWeight: FontWeight.bold),
                                      )),
                                ),
                              ),
                            ),
                          ),
                        )
                      ],
                    ), //new column child
                  ],
                ),
              );
            }));
    showDialog(
        context: ctx,
        builder: (BuildContext c) {
          return alert;
        });
  }
  
  4. show AlertDialog
  _startTimer();//to start timer
  showAlert(context);//to show dialog


=================================================================================================
  Lock Screen Rotation of entire app
=================================================================================================

  1. Create following mixin PortraitModeMixin.dart file
  
  import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

/// Forces portrait-only mode application-wide
/// Use this Mixin on the main app widget i.e. app.dart
/// Flutter's 'App' has to extend Stateless widget.
///
/// Call `super.build(context)` in the main build() method
/// to enable portrait only mode
mixin PortraitModeMixin on StatelessWidget {
  @override
  Widget build(BuildContext context) {
    _portraitModeOnly();
    return null;
  }
}

/// Forces portrait-only mode on a specific screen
/// Use this Mixin in the specific screen you want to
/// block to portrait only mode.
///
/// Call `super.build(context)` in the State's build() method
/// and `super.dispose();` in the State's dispose() method
mixin PortraitStatefulModeMixin<T extends StatefulWidget> on State<T> {
  @override
  Widget build(BuildContext context) {
    _portraitModeOnly();
    return null;
  }

  @override
  void dispose() {
    _enableRotation();
  }
}

/// blocks rotation; sets orientation to: portrait
void _portraitModeOnly() {
  SystemChrome.setPreferredOrientations([
    DeviceOrientation.portraitUp,
    DeviceOrientation.portraitDown,
  ]);
}

void _enableRotation() {
  SystemChrome.setPreferredOrientations([
    DeviceOrientation.portraitUp,
    DeviceOrientation.portraitDown,
    DeviceOrientation.landscapeLeft,
    DeviceOrientation.landscapeRight,
  ]);
}

2. Use this mixin in main.dart file

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget with PortraitModeMixin{
  @override
  Widget build(BuildContext context) {
    super.build(context);//important
    return MaterialApp(
      title: "Demo App",
      debugShowCheckedModeBanner: false,
      initialRoute: SplashScreen.routeName,
      routes: routes,
    );
  }
}
  
  To block rotation in a specific screen implement PortraitStatefulModeMixin<SampleScreen> in 
  the specific screen's state. Remember to call super.build(context) in the State's build() method 
  and super.dispose() in dispose() method. If your screen is a StatelessWidget - simply repeat the 
  App's solution (previous example) i.e. use PortraitModeMixin.
  
  /// Specific screen
class SampleScreen extends StatefulWidget {
  SampleScreen() : super();

  @override
  State<StatefulWidget> createState() => _SampleScreenState();
}

class _SampleScreenState extends State<SampleScreen>
    with PortraitStatefulModeMixin<SampleScreen> {
  @override
  Widget build(BuildContext context) {
    super.build(context);
    return Text("Flutter - Block screen rotation example");
  }

  @override
  void dispose() {
     super.dispose();
  }
}
  
  
=================================================================================================
 Configure ImagePicker plugin for iOS build
=================================================================================================

  add below lines in end of info.plist file (i.e. just above tag </dict>)
  //file location - <project root>/ios/Runner/Info.plist

  <key>NSPhotoLibraryUsageDescription</key>
  <string>Need to upload image</string>
  <key>NSCameraUsageDescription</key>
  <string>Need to upload image</string>
  <key>NSMicrophoneUsageDescription</key>
  <string>Need to upload image</string>
  
=================================================================================================
 NDK version issue solution
=================================================================================================

  Error: No version of NDK matched the requested version 20.0.5594570. Versions available locally: 21.0.6113669
  
  Step 1. Upgrade gradle plugin version - android -> build.gradle
          classpath 'com.android.tools.build:gradle:4.1.2'
  Step 2. Change gradle distribution url - android->gradle->wrapper->gradle-wrapper.properties
          distributionUrl=https\://services.gradle.org/distributions/gradle-6.5-all.zip
  Step 3. Clean , pub get and run
  
=================================================================================================
 Trim String
=================================================================================================
  
  String link = 'http://sales.local/api/v1/payments/454/ticket/verify?token=jhvycygvjhbknm.eyJpc3MiOiJodH';
  String delimiter = '/ticket';
  int lastIndex = link.indexOf(delimiter);
  String trimmed = link.substring(0,lastIndex);
  print(trimmed);


