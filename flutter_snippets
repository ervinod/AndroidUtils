
=================================================================================================
  Set alignment of Widgets
=================================================================================================

Center vertically
Column(
  mainAxisAlignment: MainAxisAlignment.center,
  children: <Widget>[ ... ],
)
Center horizontally
Column(
  crossAxisAlignment: CrossAxisAlignment.center,
  children: <Widget>[ ... ],
)
But if the column is hugging its content then just wrap it in a Center widget

Center(
  child: Column(
    children: <Widget>[ ... ],
  ),
)

=================================================================================================
  Change Flutter App Name
=================================================================================================

Android
Open AndroidManifest.xml (located at android/app/src/main)

<application
    android:label="App Name" ...> // Your app name here
iOS
Open info.plist (located at ios/Runner)

<key>CFBundleName</key>
<string>App Name</string> // Your app name here

Don't forget to run
flutter clean


=================================================================================================
  Add delay
=================================================================================================

new Future.delayed(const Duration(seconds: 1)); //recommend

new Timer(const Duration(seconds: 1), ()=>print("1 second later."));

sleep(const Duration(seconds: 1)); //import 'dart:io';

new Stream.periodic(const Duration(seconds: 1), (_) => print("1 second later.")).first.then((_)=>print("Also 1 second later."));

=================================================================================================
  Show AlertDialog
=================================================================================================
  
    void _showSignoutDialog(BuildContext context, GlobalKey<ScaffoldState> formKey, SharedPreferences sharedPreferences){
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: new Text(TextFile.SIGNOUT_TITLE, style: TextStyle(color: Colors.black.withOpacity(0.8))),
          content: new Text(TextFile.SIGNOUT_DESCRIPTION),
          actions: <Widget>[
            new FlatButton(
              child: new Text(TextFile.BUTTON_CANCEL),
              onPressed: () async {
                    Navigator.of(context).pop();
              },
            ),
            new FlatButton(
              child: new Text(TextFile.BUTTON_SIGNOUT),
              onPressed: () {
                    Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }


=================================================================================================
  Change button color if text entered in textfield is valid
=================================================================================================
  
  https://stackoverflow.com/a/58691020
  
  
 show hide widget on UI using Bloc
 https://stackoverflow.com/a/55594815


=================================================================================================
  Change button color if text entered in textfield is valid
=================================================================================================

1. In your pubspec.yaml file add this:

dependencies:
  device_info: ^0.4.0+4

2. Create a method:

Future<String> _getId() async {
  DeviceInfoPlugin deviceInfo = DeviceInfoPlugin();
  if (Theme.of(context).platform == TargetPlatform.iOS) {
    IosDeviceInfo iosDeviceInfo = await deviceInfo.iosInfo;
    return iosDeviceInfo.identifierForVendor; // unique ID on iOS
  } else {
    AndroidDeviceInfo androidDeviceInfo = await deviceInfo.androidInfo;
    return androidDeviceInfo.androidId; // unique ID on Android
  }
}

3. Use it like:

String deviceId = await _getId();

//or u can call below function to get more device info

static Future<List<String>> getDeviceDetails() async {
    String deviceName;
    String deviceVersion;
    String identifier;
    final DeviceInfoPlugin deviceInfoPlugin = new DeviceInfoPlugin();
    try {
      if (Platform.isAndroid) {
        var build = await deviceInfoPlugin.androidInfo;
        deviceName = build.model;
        deviceVersion = build.version.toString();
        identifier = build.androidId;  //UUID for Android
      } else if (Platform.isIOS) {
        var data = await deviceInfoPlugin.iosInfo;
        deviceName = data.name;
        deviceVersion = data.systemVersion;
        identifier = data.identifierForVendor;  //UUID for iOS
      }
    } on PlatformException {
      print('Failed to get platform version');
    }

//if (!mounted) return;
return [deviceName, deviceVersion, identifier];
}

=================================================================================================
  Make specific parts of a text clickable (spannable/ rich text)
=================================================================================================

Widget build(BuildContext context) {
    TextStyle defaultStyle = TextStyle(color: Colors.grey, fontSize: 20.0);
    TextStyle linkStyle = TextStyle(color: Colors.blue);
    return RichText(
      text: TextSpan(
        style: defaultStyle,
        children: <TextSpan>[
          TextSpan(text: 'By clicking Sign Up, you agree to our '),
          TextSpan(
              text: 'Terms of Service',
              style: linkStyle,
              recognizer: TapGestureRecognizer()
                ..onTap = () {
                  print('Terms of Service"');
                }),
          TextSpan(text: ' and that you have read our '),
          TextSpan(
              text: 'Privacy Policy',
              style: linkStyle,
              recognizer: TapGestureRecognizer()
                ..onTap = () {
                  print('Privacy Policy"');
                }),
        ],
      ),
    );
  }
  
=================================================================================================
  Password TextField toggle
=================================================================================================
  1. Declase boolean variable to keep track of visibility
  bool _obscurePassword = true;
  
  2. Write function to toggle boolean variable
  void _togglePasswordVisibility() {
    setState(() {
      _obscurePassword = !_obscurePassword;
    });
  }
  
  3. Configure TextFormField widget
  
  TextFormField(
      obscureText: _obscurePassword,
      decoration: InputDecoration(
        hintText: "Enter your password",
          suffixIcon: IconButton(
            onPressed: () => _togglePasswordVisibility(),
            icon: Icon(Icons.remove_red_eye,  color: this._obscurePassword ? Colors.blue : Colors.grey,),
          ),
      ),
    )
    
=================================================================================================
  build production/release apk for flutter project
=================================================================================================

  1. create key.properties file and modify build.gradle file according to below link
    https://flutter.dev/docs/deployment/android
  2. use below command to build release apk
    flutter build apk --release
    
=================================================================================================
  call post api as raw request body
=================================================================================================    
    
    
    Map data = {
      'mobile_no': mobile_no,
      'otp': enteredOTP,
    };

    //encode Map to JSON
    var requestBody = json.encode(data);

    debugPrint(requestBody);

 
      if(response.statusCode==200){
        // api success 
        Map<String , dynamic> jsonResopnse = json.decode(response.body);
        http.Response response = await http.post(ApiConstants.VERIFYOTP, body: requestBody);
       
      }else {
        // api error
      }
      
=================================================================================================
  Manage sqlite db version in flutter
=================================================================================================    
      
      Future<Database> initDb() async {

        final databasesPath = await getDatabasesPath();
        final path = join(databasesPath, "database.db");

        var db = await openDatabase(path);

        //if database does not exist yet it will return version 0
        if (await db.getVersion() < NEW_DB_VERSION) {

          db.close();

          //delete the old database so you can copy the new one
          await deleteDatabase(path);

          try {
            await Directory(dirname(path)).create(recursive: true);
          } catch (_) {}

          //copy db from assets to database folder
          ByteData data = await rootBundle.load("assets/databases/database.db");
          List<int> bytes = data.buffer.asUint8List(data.offsetInBytes, data.lengthInBytes);
          await File(path).writeAsBytes(bytes, flush: true);

          //open the newly created db 
          db = await openDatabase(path);

          //set the new version to the copied db so you do not need to do it manually on your bundled database.db
          db.setVersion(NEW_DB_VERSION);

        }

        return db;
      }
    }

=================================================================================================
  Get today's formated date
=================================================================================================    
  
  DateTime now = new DateTime.now();
    DateTime date = new DateTime(now.year, now.month, now.day);

    final customDateFormat = new DateFormat('yyyy-MM-dd');
    var mDate = customDateFormat.format(date);
    





